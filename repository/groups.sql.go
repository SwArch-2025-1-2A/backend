// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: groups.sql

package repository

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createGroup = `-- name: CreateGroup :one
INSERT INTO "Group" ("name", "description", "profile_pic", "isOpen" )
VALUES ($1, $2, $3, $4)
RETURNING id, name, description, profile_pic, "isVerified", "isOpen", created_at, updated_at, deleted_at
`

type CreateGroupParams struct {
	Name        pgtype.Text
	Description pgtype.Text
	ProfilePic  pgtype.Text
	IsOpen      pgtype.Bool
}

func (q *Queries) CreateGroup(ctx context.Context, arg CreateGroupParams) (Group, error) {
	row := q.db.QueryRow(ctx, createGroup,
		arg.Name,
		arg.Description,
		arg.ProfilePic,
		arg.IsOpen,
	)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ProfilePic,
		&i.IsVerified,
		&i.IsOpen,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getGroups = `-- name: GetGroups :many
SELECT id, name, description, profile_pic, "isVerified", "isOpen", created_at, updated_at, deleted_at FROM "Group"
WHERE "deleted_at" is NULL
ORDER BY "name"
`

func (q *Queries) GetGroups(ctx context.Context) ([]Group, error) {
	rows, err := q.db.Query(ctx, getGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Group
	for rows.Next() {
		var i Group
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.ProfilePic,
			&i.IsVerified,
			&i.IsOpen,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteGroup = `-- name: SoftDeleteGroup :one
UPDATE "Group"
SET "deleted_at" = now()
WHERE "id" = $1
RETURNING id, name, description, profile_pic, "isVerified", "isOpen", created_at, updated_at, deleted_at
`

func (q *Queries) SoftDeleteGroup(ctx context.Context, id uuid.UUID) (Group, error) {
	row := q.db.QueryRow(ctx, softDeleteGroup, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ProfilePic,
		&i.IsVerified,
		&i.IsOpen,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const verifyGroup = `-- name: VerifyGroup :one
UPDATE "Group"
SET "isVerified" = true
WHERE "id" = $1
RETURNING id, name, description, profile_pic, "isVerified", "isOpen", created_at, updated_at, deleted_at
`

func (q *Queries) VerifyGroup(ctx context.Context, id uuid.UUID) (Group, error) {
	row := q.db.QueryRow(ctx, verifyGroup, id)
	var i Group
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.ProfilePic,
		&i.IsVerified,
		&i.IsOpen,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
